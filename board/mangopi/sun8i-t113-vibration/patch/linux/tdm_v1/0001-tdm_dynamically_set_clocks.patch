diff --git a/drivers/clk/sunxi-ng/ccu-sun20i-d1.c b/drivers/clk/sunxi-ng/ccu-sun20i-d1.c
index 48a8fb2c43b7..bd8aef11d0c6 100644
--- a/drivers/clk/sunxi-ng/ccu-sun20i-d1.c
+++ b/drivers/clk/sunxi-ng/ccu-sun20i-d1.c
@@ -170,6 +170,7 @@ static struct ccu_nkmp pll_ve_clk = {
 #define SUN20I_D1_PLL_AUDIO0_REG		0x078
 static struct ccu_sdm_setting pll_audio0_sdm_table[] = {
 	{ .rate = 90316800, .pattern = 0xc001288d, .m = 6, .n = 22 },
+	{ .rate = 98304000, .pattern = 0xc0008f5c, .m = 225, .n = 55 },
 };
 
 static struct ccu_nm pll_audio0_4x_clk = {
diff --git a/sound/soc/codecs/wm8782.c b/sound/soc/codecs/wm8782.c
index 3a2acdfa9b85..574096b943ef 100644
--- a/sound/soc/codecs/wm8782.c
+++ b/sound/soc/codecs/wm8782.c
@@ -40,8 +40,9 @@ static int wm8782_dai_startup(struct snd_pcm_substream *sub, struct snd_soc_dai
 	struct wm8782_priv *priv =
 		snd_soc_component_get_drvdata(dai->component);
 
-	return snd_pcm_hw_constraint_minmax(runtime, SNDRV_PCM_HW_PARAM_RATE,
-					   8000, priv->max_rate);
+	//return snd_pcm_hw_constraint_minmax(runtime, SNDRV_PCM_HW_PARAM_RATE,
+	//				   8000, priv->max_rate);
+	return 0;
 }
 
 static const struct snd_soc_dapm_widget wm8782_dapm_widgets[] = {
@@ -63,11 +64,14 @@ static struct snd_soc_dai_driver wm8782_dai = {
 	.capture = {
 		.stream_name = "Capture",
 		.channels_min = 2,
-		.channels_max = 2,
-		.rates = SNDRV_PCM_RATE_8000_192000,
+		.channels_max = 16,
+		.rates = SNDRV_PCM_RATE_CONTINUOUS | SNDRV_PCM_RATE_KNOT,
+		.rate_min = 1000,
+		.rate_max = 384000,
 		.formats = SNDRV_PCM_FMTBIT_S16_LE |
 			   SNDRV_PCM_FMTBIT_S20_3LE |
-			   SNDRV_PCM_FMTBIT_S24_LE,
+			   SNDRV_PCM_FMTBIT_S24_LE |
+			   SNDRV_PCM_FMTBIT_S32_LE,
 	},
 	.ops = &wm8782_dai_ops,
 };
diff --git a/sound/soc/sunxi/sun4i-i2s.c b/sound/soc/sunxi/sun4i-i2s.c
index 598b263f27f7..e4a261f2e643 100644
--- a/sound/soc/sunxi/sun4i-i2s.c
+++ b/sound/soc/sunxi/sun4i-i2s.c
@@ -167,7 +167,6 @@ struct sun4i_i2s;
  * @num_bclk_dividers: number of bit clock dividers
  * @mclk_dividers: mclk dividers array
  * @num_mclk_dividers: number of mclk dividers
- * @get_bclk_parent_rate: callback to get bclk parent rate
  * @get_sr: callback to get sample resolution
  * @get_wss: callback to get word select size
  * @set_chan_cfg: callback to set channel configuration
@@ -191,7 +190,6 @@ struct sun4i_i2s_quirks {
 	const struct sun4i_i2s_clk_div	*mclk_dividers;
 	unsigned int			num_mclk_dividers;
 
-	unsigned long (*get_bclk_parent_rate)(const struct sun4i_i2s *i2s);
 	int	(*get_sr)(unsigned int width);
 	int	(*get_wss)(unsigned int width);
 
@@ -344,126 +342,72 @@ static const struct sun4i_i2s_clk_div sun8i_i2s_clk_div[] = {
 	{ .div = 192, .val = 15 },
 };
 
-static unsigned long sun4i_i2s_get_bclk_parent_rate(const struct sun4i_i2s *i2s)
-{
-	return i2s->mclk_freq;
-}
-
-static unsigned long sun8i_i2s_get_bclk_parent_rate(const struct sun4i_i2s *i2s)
-{
-	return clk_get_rate(i2s->mod_clk);
-}
-
-static int sun4i_i2s_get_bclk_div(struct sun4i_i2s *i2s,
-				  unsigned long parent_rate,
-				  unsigned int sampling_rate,
-				  unsigned int channels,
-				  unsigned int word_size)
-{
-	const struct sun4i_i2s_clk_div *dividers = i2s->variant->bclk_dividers;
-	int div = parent_rate / sampling_rate / word_size / channels;
-	int i;
-
-	for (i = 0; i < i2s->variant->num_bclk_dividers; i++) {
-		const struct sun4i_i2s_clk_div *bdiv = &dividers[i];
-
-		if (bdiv->div == div)
-			return bdiv->val;
-	}
-
-	return -EINVAL;
-}
-
-static int sun4i_i2s_get_mclk_div(struct sun4i_i2s *i2s,
-				  unsigned long parent_rate,
-				  unsigned long mclk_rate)
-{
-	const struct sun4i_i2s_clk_div *dividers = i2s->variant->mclk_dividers;
-	int div = parent_rate / mclk_rate;
-	int i;
-
-	for (i = 0; i < i2s->variant->num_mclk_dividers; i++) {
-		const struct sun4i_i2s_clk_div *mdiv = &dividers[i];
-
-		if (mdiv->div == div)
-			return mdiv->val;
-	}
-
-	return -EINVAL;
-}
-
-static int sun4i_i2s_oversample_rates[] = { 128, 192, 256, 384, 512, 768 };
-static bool sun4i_i2s_oversample_is_valid(unsigned int oversample)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(sun4i_i2s_oversample_rates); i++)
-		if (sun4i_i2s_oversample_rates[i] == oversample)
-			return true;
-
-	return false;
-}
-
 static int sun4i_i2s_set_clk_rate(struct snd_soc_dai *dai,
 				  unsigned int rate,
 				  unsigned int slots,
 				  unsigned int slot_width)
 {
 	struct sun4i_i2s *i2s = snd_soc_dai_get_drvdata(dai);
-	unsigned int oversample_rate, clk_rate, bclk_parent_rate;
+	unsigned int clk_rate, mclk_rate, mclk_diff;
 	int bclk_div, mclk_div;
-	int ret;
-
-	switch (rate) {
-	case 176400:
-	case 88200:
-	case 44100:
-	case 22050:
-	case 11025:
-		clk_rate = 22579200;
-		break;
-
-	case 192000:
-	case 128000:
-	case 96000:
-	case 64000:
-	case 48000:
-	case 32000:
-	case 24000:
-	case 16000:
-	case 12000:
-	case 8000:
-		clk_rate = 24576000;
-		break;
-
-	default:
-		dev_err(dai->dev, "Unsupported sample rate: %u\n", rate);
-		return -EINVAL;
+	int mclk_i, bclk_i;
+
+	clk_rate = rate * slots * slot_width;
+	mclk_diff = clk_rate;
+	mclk_rate = 0;
+	dev_info(dai->dev, "Desired rate is %i\n", clk_rate);
+
+	const struct sun4i_i2s_clk_div *mclk_dividers = i2s->variant->mclk_dividers;
+	const struct sun4i_i2s_clk_div *bclk_dividers = i2s->variant->bclk_dividers;
+	for (mclk_i = 0; mclk_i < i2s->variant->num_mclk_dividers; mclk_i++) {
+		int mdiv = mclk_dividers[mclk_i].div;
+		int bdiv = 0;
+		for (bclk_i = 0; bclk_i < i2s->variant->num_bclk_dividers; bclk_i++) {
+			bdiv = bclk_dividers[bclk_i].div;
+			if (bdiv >= mdiv)
+				break;
+		}
+		if (bdiv != mdiv) {
+			continue;
+		}
+		int new_mclk = clk_rate * mdiv;
+		int actual_mclk = clk_round_rate(i2s->mod_clk, new_mclk);
+		if (actual_mclk < 0) {
+			dev_err(dai->dev, "Unable to round MCLK: %i", actual_mclk);
+			return actual_mclk;
+		}
+		int actual_rate = actual_mclk / mdiv;
+		int diff = abs(actual_rate - clk_rate);
+		if (diff < mclk_diff) {
+			mclk_rate = new_mclk;
+			mclk_diff = diff;
+			mclk_div = mclk_dividers[mclk_i].val;
+			bclk_div = bclk_dividers[bclk_i].val;
+			dev_info(dai->dev, "Found new MCLK %i rate %i diff %i div %i", mclk_rate, actual_mclk / mdiv, mclk_diff, mclk_div);
+		}
+		if (diff == 0) {
+			dev_info(dai->dev, "MCLK is perfect");
+			break;
+		}
 	}
 
-	ret = clk_set_rate(i2s->mod_clk, clk_rate);
-	if (ret)
-		return ret;
-
-	oversample_rate = i2s->mclk_freq / rate;
-	if (!sun4i_i2s_oversample_is_valid(oversample_rate)) {
-		dev_err(dai->dev, "Unsupported oversample rate: %d\n",
-			oversample_rate);
+	int max_percent_diff = 5;
+	int max_diff = (clk_rate / (100 / max_percent_diff));
+	
+	if(mclk_diff > max_diff) {
+		dev_err(dai->dev, "MCLK diff too big!");
 		return -EINVAL;
 	}
 
-	bclk_parent_rate = i2s->variant->get_bclk_parent_rate(i2s);
-	bclk_div = sun4i_i2s_get_bclk_div(i2s, bclk_parent_rate,
-					  rate, slots, slot_width);
-	if (bclk_div < 0) {
-		dev_err(dai->dev, "Unsupported BCLK divider: %d\n", bclk_div);
+	if (mclk_rate == 0) {
+		dev_err(dai->dev, "Unable to find MCLK");
 		return -EINVAL;
 	}
 
-	mclk_div = sun4i_i2s_get_mclk_div(i2s, clk_rate, i2s->mclk_freq);
-	if (mclk_div < 0) {
-		dev_err(dai->dev, "Unsupported MCLK divider: %d\n", mclk_div);
-		return -EINVAL;
+	int ret = clk_set_rate(i2s->mod_clk, mclk_rate);
+	if (ret < 0) {
+		dev_err(dai->dev, "Unable to set MCLK: %i", ret);
+		return ret;
 	}
 
 	regmap_write(i2s->regmap, SUN4I_I2S_CLK_DIV_REG,
@@ -472,6 +416,8 @@ static int sun4i_i2s_set_clk_rate(struct snd_soc_dai *dai,
 
 	regmap_field_write(i2s->field_clkdiv_mclk_en, 1);
 
+	dev_info(dai->dev, "Settled for MCLK %i", mclk_rate);
+
 	return 0;
 }
 
@@ -580,7 +526,7 @@ static int sun8i_i2s_set_chan_cfg(const struct sun4i_i2s *i2s,
 	case SND_SOC_DAIFMT_LEFT_J:
 	case SND_SOC_DAIFMT_RIGHT_J:
 	case SND_SOC_DAIFMT_I2S:
-		lrck_period = slot_width;
+		lrck_period = slot_width * slots / 2;
 		break;
 
 	default:
@@ -660,7 +606,7 @@ static int sun50i_h6_i2s_set_chan_cfg(const struct sun4i_i2s *i2s,
 	case SND_SOC_DAIFMT_LEFT_J:
 	case SND_SOC_DAIFMT_RIGHT_J:
 	case SND_SOC_DAIFMT_I2S:
-		lrck_period = slot_width;
+		lrck_period = slot_width * slots / 2;
 		break;
 
 	default:
@@ -1193,21 +1139,26 @@ static const struct snd_soc_dai_ops sun4i_i2s_dai_ops = {
 
 #define SUN4I_FORMATS	(SNDRV_PCM_FMTBIT_S16_LE | \
 			 SNDRV_PCM_FMTBIT_S20_LE | \
-			 SNDRV_PCM_FMTBIT_S24_LE)
+			 SNDRV_PCM_FMTBIT_S24_LE | \
+			 SNDRV_PCM_FMTBIT_S32_LE)
 
 static struct snd_soc_dai_driver sun4i_i2s_dai = {
 	.capture = {
 		.stream_name = "Capture",
 		.channels_min = 1,
 		.channels_max = 8,
-		.rates = SNDRV_PCM_RATE_8000_192000,
+		.rates = SNDRV_PCM_RATE_CONTINUOUS | SNDRV_PCM_RATE_KNOT,
+		.rate_min = 1000,
+		.rate_max = 384000,
 		.formats = SUN4I_FORMATS,
 	},
 	.playback = {
 		.stream_name = "Playback",
 		.channels_min = 1,
 		.channels_max = 8,
-		.rates = SNDRV_PCM_RATE_8000_192000,
+		.rates = SNDRV_PCM_RATE_CONTINUOUS | SNDRV_PCM_RATE_KNOT,
+		.rate_min = 1000,
+		.rate_max = 384000,
 		.formats = SUN4I_FORMATS,
 	},
 	.ops = &sun4i_i2s_dai_ops,
@@ -1441,7 +1392,6 @@ static const struct sun4i_i2s_quirks sun4i_a10_i2s_quirks = {
 	.num_bclk_dividers	= ARRAY_SIZE(sun4i_i2s_bclk_div),
 	.mclk_dividers		= sun4i_i2s_mclk_div,
 	.num_mclk_dividers	= ARRAY_SIZE(sun4i_i2s_mclk_div),
-	.get_bclk_parent_rate	= sun4i_i2s_get_bclk_parent_rate,
 	.get_sr			= sun4i_i2s_get_sr,
 	.get_wss		= sun4i_i2s_get_wss,
 	.set_chan_cfg		= sun4i_i2s_set_chan_cfg,
@@ -1459,7 +1409,6 @@ static const struct sun4i_i2s_quirks sun6i_a31_i2s_quirks = {
 	.num_bclk_dividers	= ARRAY_SIZE(sun4i_i2s_bclk_div),
 	.mclk_dividers		= sun4i_i2s_mclk_div,
 	.num_mclk_dividers	= ARRAY_SIZE(sun4i_i2s_mclk_div),
-	.get_bclk_parent_rate	= sun4i_i2s_get_bclk_parent_rate,
 	.get_sr			= sun4i_i2s_get_sr,
 	.get_wss		= sun4i_i2s_get_wss,
 	.set_chan_cfg		= sun4i_i2s_set_chan_cfg,
@@ -1482,7 +1431,6 @@ static const struct sun4i_i2s_quirks sun8i_a83t_i2s_quirks = {
 	.num_bclk_dividers	= ARRAY_SIZE(sun4i_i2s_bclk_div),
 	.mclk_dividers		= sun4i_i2s_mclk_div,
 	.num_mclk_dividers	= ARRAY_SIZE(sun4i_i2s_mclk_div),
-	.get_bclk_parent_rate	= sun4i_i2s_get_bclk_parent_rate,
 	.get_sr			= sun4i_i2s_get_sr,
 	.get_wss		= sun4i_i2s_get_wss,
 	.set_chan_cfg		= sun4i_i2s_set_chan_cfg,
@@ -1500,7 +1448,6 @@ static const struct sun4i_i2s_quirks sun8i_h3_i2s_quirks = {
 	.num_bclk_dividers	= ARRAY_SIZE(sun8i_i2s_clk_div),
 	.mclk_dividers		= sun8i_i2s_clk_div,
 	.num_mclk_dividers	= ARRAY_SIZE(sun8i_i2s_clk_div),
-	.get_bclk_parent_rate	= sun8i_i2s_get_bclk_parent_rate,
 	.get_sr			= sun8i_i2s_get_sr_wss,
 	.get_wss		= sun8i_i2s_get_sr_wss,
 	.set_chan_cfg		= sun8i_i2s_set_chan_cfg,
@@ -1518,7 +1465,6 @@ static const struct sun4i_i2s_quirks sun50i_a64_codec_i2s_quirks = {
 	.num_bclk_dividers	= ARRAY_SIZE(sun4i_i2s_bclk_div),
 	.mclk_dividers		= sun4i_i2s_mclk_div,
 	.num_mclk_dividers	= ARRAY_SIZE(sun4i_i2s_mclk_div),
-	.get_bclk_parent_rate	= sun4i_i2s_get_bclk_parent_rate,
 	.get_sr			= sun4i_i2s_get_sr,
 	.get_wss		= sun4i_i2s_get_wss,
 	.set_chan_cfg		= sun4i_i2s_set_chan_cfg,
@@ -1536,7 +1482,6 @@ static const struct sun4i_i2s_quirks sun50i_h6_i2s_quirks = {
 	.num_bclk_dividers	= ARRAY_SIZE(sun8i_i2s_clk_div),
 	.mclk_dividers		= sun8i_i2s_clk_div,
 	.num_mclk_dividers	= ARRAY_SIZE(sun8i_i2s_clk_div),
-	.get_bclk_parent_rate	= sun8i_i2s_get_bclk_parent_rate,
 	.get_sr			= sun8i_i2s_get_sr_wss,
 	.get_wss		= sun8i_i2s_get_sr_wss,
 	.set_chan_cfg		= sun50i_h6_i2s_set_chan_cfg,
@@ -1556,7 +1501,6 @@ static const struct sun4i_i2s_quirks sun50i_r329_i2s_quirks = {
 	.num_bclk_dividers	= ARRAY_SIZE(sun8i_i2s_clk_div),
 	.mclk_dividers		= sun8i_i2s_clk_div,
 	.num_mclk_dividers	= ARRAY_SIZE(sun8i_i2s_clk_div),
-	.get_bclk_parent_rate	= sun8i_i2s_get_bclk_parent_rate,
 	.get_sr			= sun8i_i2s_get_sr_wss,
 	.get_wss		= sun8i_i2s_get_sr_wss,
 	.set_chan_cfg		= sun50i_h6_i2s_set_chan_cfg,
